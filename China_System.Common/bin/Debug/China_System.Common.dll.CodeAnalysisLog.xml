<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="d:\yhocn123\visual studio\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Targets>
  <Target Name="D:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common\bin\Debug\China_System.Common.dll">
   <Modules>
    <Module Name="china_system.common.dll">
     <Namespaces>
      <Namespace Name="China_System.Common">
       <Types>
        <Type Name="clsCommHelp" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#objToDateTime`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="clsCommHelp.cs" Line="97">'clsCommHelp.objToDateTime&lt;T&gt;(T)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#objToDateTime1`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="clsCommHelp.cs" Line="148">'clsCommHelp.objToDateTime1&lt;T&gt;(T)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#objToDateTime2`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="clsCommHelp.cs" Line="189">'clsCommHelp.objToDateTime2&lt;T&gt;(T)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="clsKeyMyExcelProcess" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetWindowThreadProcessId(System.IntPtr,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 'clsKeyMyExcelProcess.GetWindowThreadProcessId(IntPtr, out int)'。</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">更改 P/Invoke 'clsKeyMyExcelProcess.GetWindowThreadProcessId(IntPtr, out int)' 的可访问性，使它在自己的程序集外部不再是可见的。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Kill(Microsoft.Office.Interop.Excel.Application)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="clsKeyMyExcelProcess.cs" Line="28">'clsKeyMyExcelProcess.Kill(Application)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Order.Common">
       <Types>
        <Type Name="MySqlHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildQueryCommand(MySql.Data.MySqlClient.MySqlConnection,System.String,System.Data.IDataParameter[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="328">传递给 'MySqlHelper.BuildQueryCommand(MySqlConnection, string, IDataParameter[])' 中的 'MySqlCommand.MySqlCommand(string, MySqlConnection)' 的查询字符串可能包含以下变量 'storedProcName'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteReader(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="49">可以在方法 'MySqlHelper.ExecuteReader(string)' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 49</Issue>
            </Message>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="31">传递给 'MySqlHelper.ExecuteReader(string)' 中的 'MySqlCommand.MySqlCommand(string, MySqlConnection)' 的查询字符串可能包含以下变量 'sqlString'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="118">可以在方法 'MySqlHelper.ExecuteReader(string, string, params MySqlParameter[])' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 118</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSql(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="142">'MySqlHelper.ExecuteSql(string)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="151">可以在方法 'MySqlHelper.ExecuteSql(string)' 中多次释放对象 'cmd'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 151</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="150">可以在方法 'MySqlHelper.ExecuteSql(string)' 中多次释放对象 'conn'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 150, 151</Issue>
            </Message>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="134">传递给 'MySqlHelper.ExecuteSql(string)' 中的 'MySqlCommand.MySqlCommand(string, MySqlConnection)' 的查询字符串可能包含以下变量 'sql'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteSql(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="185">可以在方法 'MySqlHelper.ExecuteSql(string, string, params MySqlParameter[])' 中多次释放对象 'cmd'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 185</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="185">可以在方法 'MySqlHelper.ExecuteSql(string, string, params MySqlParameter[])' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 185</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#getCount(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="82">可以在方法 'MySqlHelper.getCount(string)' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 82</Issue>
            </Message>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="59">传递给 'MySqlHelper.getCount(string)' 中的 'MySqlCommand.MySqlCommand(string, MySqlConnection)' 的查询字符串可能包含以下变量 'sql'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataSet(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="208">'MySqlHelper.GetDataSet(string)' 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Issue>
            </Message>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="216">可以在方法 'MySqlHelper.GetDataSet(string)' 中多次释放对象 'conn'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 216</Issue>
            </Message>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="205">传递给 'MySqlHelper.GetDataSet(string)' 中的 'MySqlDataAdapter.MySqlDataAdapter(string, MySqlConnection)' 的查询字符串可能包含以下变量 'sql'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDataSet(System.String,MySql.Data.MySqlClient.MySqlParameter[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="251">可以在方法 'MySqlHelper.GetDataSet(string, params MySqlParameter[])' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 251</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSingle(System.String,MySql.Data.MySqlClient.MySqlParameter[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="292">可以在方法 'MySqlHelper.GetSingle(string, params MySqlParameter[])' 中多次释放对象 'cmd'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 292</Issue>
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="292">可以在方法 'MySqlHelper.GetSingle(string, params MySqlParameter[])' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 292</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="349">传递给 'MySqlHelper.PrepareCommand(MySqlCommand, MySqlConnection, MySqlTransaction, string, MySqlParameter[])' 中的 'MySqlCommand.CommandText.set(string)' 的查询字符串可能包含以下变量 'cmdText'。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RunProcedureForDataSet(System.String,System.Data.IDataParameter[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2020-12-30 09:11:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\yhocn123\工作\jinxiaocun_pc\YH_jinxiaocun_PC\China_System.Common" File="MySqlHelper.cs" Line="314">可以在方法 'MySqlHelper.RunProcedureForDataSet(string, IDataParameter[])' 中多次释放对象 'connection'。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 314</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>将 P/Invoke 移动到 NativeMethods 类</Name>
   <Description>此类型包含具有 DllImport 特性的成员。具有 DllImport 特性的成员应包含在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中。</Description>
   <Resolution Name="Default">由于是 P/Invoke 方法，因此，应在名为 NativeMethods、SafeNativeMethods 或 UnsafeNativeMethods 的类中定义 {0}。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes 应该是不可见的</Name>
   <Description>互操作层不应该是公共的。DllImport 特性不应该应用于可公开访问的成员(公共成员或受保护的成员)。</Description>
   <Resolution Name="Default">更改 P/Invoke {0} 的可访问性，使它在自己的程序集外部不再是可见的。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>再次引发以保留堆栈详细信息</Name>
   <Description>重复引发捕获的异常时，请使用 IL 再次引发指令保留原始堆栈详细信息。</Description>
   <Resolution Name="Default">{0} 再次引发捕获的异常并将其显式地指定为一个参数。请改用不带参数的“throw”以保留该异常最初引发时所在的堆栈位置。</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="不要多次释放对象" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>不要多次释放对象</Name>
   <Description>可以多次调用正确实现的 Dispose 方法，而不会引发异常。但是，并不保证所有情况下都会如此。若要避免生成 System.ObjectDisposedException，您不应对一个对象多次调用 Dispose。</Description>
   <Resolution Name="Default">可以在方法 {1} 中多次释放对象 {0}。若要避免生成 System.ObjectDisposedException，不应对一个对象多次调用 Dispose。: Lines: 314</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="检查 SQL 查询是否存在安全漏洞" Category="Microsoft.Security" CheckId="CA2100">
   <Name>检查 SQL 查询是否存在安全漏洞</Name>
   <Description>通过用户输入生成的 SQL 命令字符串容易受到 SQL 注入式攻击。Microsoft SQL Server 和其他数据库服务器支持存储过程和参数化 SQL 查询，这将降低受到注入式攻击的风险。</Description>
   <Resolution Name="WithNonLiterals">传递给 {1} 中的 {0} 的查询字符串可能包含以下变量 {2}。如果其中的任意变量可能来自用户输入，请考虑使用存储过程或参数化 SQL 查询，而不是通过字符串串联来生成查询。</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">类别</String>
  <String Key="Certainty">确定性</String>
  <String Key="CollapseAll">全部折叠</String>
  <String Key="CheckId">检查 ID</String>
  <String Key="Error">错误</String>
  <String Key="Errors">错误</String>
  <String Key="ExpandAll">全部展开</String>
  <String Key="Help">帮助</String>
  <String Key="Line">行</String>
  <String Key="Messages">消息</String>
  <String Key="LocationNotStoredInPdb">[位置未存储在 Pdb 中]</String>
  <String Key="Project">项目</String>
  <String Key="Resolution">解析</String>
  <String Key="Rule">规则</String>
  <String Key="RuleFile">规则文件</String>
  <String Key="RuleDescription">规则说明</String>
  <String Key="Source">源</String>
  <String Key="Status">状态</String>
  <String Key="Target">目标</String>
  <String Key="Warning">警告</String>
  <String Key="Warnings">警告</String>
  <String Key="ReportTitle">代码分析报告</String>
 </Localized>
</FxCopReport>
